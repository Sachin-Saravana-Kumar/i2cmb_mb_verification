var g_data = {"tp":[{"fixed_attr_val":[2240,144,31.52,31.52,"testplan",1,"testplan","-",0,"0",3],"children":[{"fixed_attr_val":[14,6,12.50,12.50,"testplan",1,"Register_coverage",100.00,1,"1",3],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[5,3,37.50,37.50,"testplan",1,"Register Covergroup",100.00,2,"1.1",1],"usr_attr":[{"Description":"Register Covergroup"}],"children":[{"fixed_attr_val":[4,3,75.00,75.00,"covergroup",1,"/wb_pkg/wb_coverage/register_cg",100.00,37,1,0]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/register_cg","-",-1,-1,-1]}]},{"fixed_attr_val":[5,3,37.50,37.50,"testplan",1,"Valid Register Address Check",100.00,2,"1.2",1],"usr_attr":[{"Description":"Validate accessibility of all register addresses by executing read and write operations on CSR, DPR, CMDR, and FSMP registers."}],"children":[{"fixed_attr_val":[4,3,75.00,75.00,"coverpoint",1,"/wb_pkg/wb_coverage/register_cg/address",100.00,37,1,1]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\register_cg::address ","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Invalid Register Address Handling",100.00,2,"1.3",2],"usr_attr":[{"Description":"Perform a write operation to an invalid register address to confirm error handling."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Register Permissions",100.00,2,"1.4",2],"usr_attr":[{"Description":"Verify that write-protected registers, such as FSMR, reject unintended modifications by attempting to write to a read-only register."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Register reset",100.00,2,"1.5",2],"usr_attr":[{"Description":"Reset the IICMB core using the reset signal and ensure that the 'e' bit in the CSR register is cleared to 0."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Default Register Value Verification",100.00,2,"1.6",2],"usr_attr":[{"Description":"Check that all registers are correctly initialized to their default values."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]}]},{"fixed_attr_val":[1487,23,58.51,58.51,"testplan",1,"I2C Transaction Coverage",100.00,1,"2",1],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[839,12,42.08,42.08,"testplan",1,"I2C Covergroup",100.00,2,"2.1",1],"usr_attr":[{"Description":"Establish a covergroup to assess the completeness of I2C transaction coverage, ensuring thorough protocol validation."}],"children":[{"fixed_attr_val":[839,12,42.08,42.08,"covergroup",1,"/i2c_pkg/i2c_coverage/i2c_transaction_cg",100.00,58,1,0]}]},{"fixed_attr_val":[1,1,100.00,100.00,"testplan",1,"I2C Address Validation",100.00,2,"2.2",1],"usr_attr":[{"Description":"Define a coverpoint to confirm that all possible I2C transaction addresses are accessed, spanning various address ranges."}],"children":[{"fixed_attr_val":[1,1,100.00,100.00,"coverpoint",1,"/i2c_pkg/i2c_coverage/i2c_transaction_cg/address",100.00,58,1,1]}]},{"fixed_attr_val":[4,2,50.00,50.00,"testplan",1,"I2C Data Transfer Coverage",100.00,2,"2.3",1],"usr_attr":[{"Description":"Capture and analyze all data values exchanged during I2C transactions to ensure exhaustive data validation."}],"children":[{"fixed_attr_val":[4,2,50.00,50.00,"coverpoint",1,"/i2c_pkg/i2c_coverage/i2c_transaction_cg/data",100.00,58,1,1]}]},{"fixed_attr_val":[2,2,100.00,100.00,"testplan",1,"I2C Operation Coverage",100.00,2,"2.4",1],"usr_attr":[{"Description":"Include a coverpoint to monitor different I2C transaction operations."}],"children":[{"fixed_attr_val":[2,2,100.00,100.00,"coverpoint",1,"/i2c_pkg/i2c_coverage/i2c_transaction_cg/op",100.00,58,1,1]}]},{"fixed_attr_val":[641,6,0.46,0.46,"testplan",1,"I2C Transaction Combination Testing",100.00,2,"2.5",1],"usr_attr":[{"Description":"Implement cross-coverage to verify all combinations of transaction address, data, and operation types."}],"children":[{"fixed_attr_val":[640,6,0.93,0.93,"cross",1,"/i2c_pkg/i2c_coverage/i2c_transaction_cg/address_x_data_x_op",100.00,58,1,1]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\i2c_transaction_cg::address_x_data_x_op ","-",-1,-1,-1]}]}]},{"fixed_attr_val":[663,74,18.04,18.04,"testplan",1,"Wishbone (WB) Transaction Coverage","-",1,"3",1],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[589,37,12.89,12.89,"testplan",1,"WB Covergroup",100.00,2,"3.1",1],"usr_attr":[{"Description":"Develop a covergroup to evaluate the completeness of WB transaction coverage, ensuring compliance with protocol specifications."}],"children":[{"fixed_attr_val":[588,37,25.78,25.78,"covergroup",1,"/wb_pkg/wb_coverage/wb_transaction_cg",100.00,37,1,0]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/wb_transaction_cg","-",-1,-1,-1]}]},{"fixed_attr_val":[5,0,0.00,0.00,"testplan",1,"WB Address Validation",100.00,2,"3.2",1],"usr_attr":[{"Description":"Track all valid WB transaction addresses to guarantee that every register or memory-mapped location is accessed."}],"children":[{"fixed_attr_val":[4,0,0.00,0.00,"coverpoint",1,"/wb_pkg/wb_coverage/wb_transaction_cg/address",100.00,37,1,1]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\wb_transaction_cg::address ","-",-1,-1,-1]}]},{"fixed_attr_val":[65,35,27.34,27.34,"testplan",1,"WB Data Coverage",100.00,2,"3.3",1],"usr_attr":[{"Description":"Monitor WB transaction data values to ensure that all potential variations are considered."}],"children":[{"fixed_attr_val":[64,35,54.68,54.68,"coverpoint",1,"/wb_pkg/wb_coverage/wb_transaction_cg/data",100.00,37,1,1]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\wb_transaction_cg::data ","-",-1,-1,-1]}]},{"fixed_attr_val":[3,2,50.00,50.00,"testplan",1,"WB WE",100.00,2,"3.4",1],"usr_attr":[{"Description":"Introduce a coverpoint to validate WB transaction write enable (WE) signals"}],"children":[{"fixed_attr_val":[2,2,100.00,100.00,"coverpoint",1,"/wb_pkg/wb_coverage/wb_transaction_cg/we",100.00,37,1,1]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\wb_transaction_cg::we ","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"WB Transaction Cross",100.00,2,"3.5",1],"usr_attr":[{"Description":"Establish cross-coverage to assess all valid combinations of WB transaction addresses, data values, and write enable signals."}],"children":[{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\wb_transaction_cg::address_x_data_x_we ","-",-1,-1,-1]}]}]},{"fixed_attr_val":[3,0,0.00,0.00,"testplan",1,"compulsory_tests","-",1,"4",2],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Random Read Operations",100.00,2,"4.1",2],"usr_attr":[{"Description":"Conduct continuous read operations on random data from the I2C slave to assess stability and accuracy."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"Random Write Operations",100.00,2,"4.2",2],"usr_attr":[{"Description":"Perform continuous write operations with varied data to the I2C slave, verifying the system's ability to handle different write scenarios."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]},{"fixed_attr_val":[1,0,0.00,0.00,"testplan",1,"\\Alternating Reads/Writes Test\\",100.00,2,"4.3",2],"usr_attr":[{"Description":"Alternate between read and write operations on the I2C slave to ensure data consistency and reliable interface performance."}],"children":[{"fixed_attr_val":[1,0,0.00,"-","potential_test","-","i2cmb_test","-",-1,-1,-1]}]}]},{"fixed_attr_val":[73,41,32.79,32.79,"testplan",1,"fsm_coverage","-",1,"5",1],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[47,25,30.48,30.48,"testplan",1,"MBIT Coverage",100.00,2,"5.1",1],"usr_attr":[{"Description":"Coverage of bit level fsm"}],"children":[{"fixed_attr_val":[46,25,60.96,60.96,"fsm",1,"/top/DUT/iicmb_m_inst0/mbit_inst0/state",100.00,30,1,0]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\/top/DUT/iicmb_m_inst0/mbit_inst0 ","-",-1,-1,-1]}]},{"fixed_attr_val":[26,16,35.11,35.11,"testplan",1,"MBYTE Coverage",100.00,2,"5.2",1],"usr_attr":[{"Description":"Coverage of byte level fsm"}],"children":[{"fixed_attr_val":[25,16,70.22,70.22,"fsm",1,"/top/DUT/iicmb_m_inst0/mbyte_inst0/state",100.00,29,1,0]},{"fixed_attr_val":[1,0,"U",0.00,"user bin",1,"/#TestplanGenericCoverage#/GenericScope/\\/top/DUT/iicmb_m_inst0/mbyte_inst0 ","-",-1,-1,-1]}]}]},{"fixed_attr_val":[0,0,67.30,67.30,"testplan",1,"Code_Coverage",100.00,1,"6",1],"usr_attr":[{"Description":""}],"children":[{"fixed_attr_val":[0,0,67.30,67.30,"testplan",1,"DUT",100.00,2,"6.1",1],"usr_attr":[{"Description":"\"Ensures that all design units achieve 100% statement and branch coverage, verifying that no untested logic paths exist.\""}],"children":[]}]}]}],"head":["Description"]};
processTpLinks(g_data);